import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer as vector
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score,recall_score, confusion_matrix
from sklearn.model_selection import train_test_split,GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler


df = pd.read_csv("website_classification.csv")

vectorize = vector(max_features = 5000)

x = vectorize.fit_transform(df["cleaned_website_text"])

le = LabelEncoder()

y = le.fit_transform(df["Category"])


xtrain,xtest,ytrain,ytest = train_test_split(x,y, stratify = y,random_state = 1, test_size = 0.3)

cs = np.logspace(-4,4,10)

grid = GridSearchCV(LogisticRegression(), {"C":cs})

grid.fit(xtrain, ytrain)

c = grid.best_params_["C"]

model = LogisticRegression(solver = "sag", multi_class = "multinomial",C = c, penalty = "l2", random_state = 0,class_weight = "balanced")

model.fit(xtrain,ytrain)

pred = model.predict(xtest)

print("accuracy",accuracy_score(ytest,pred))
print("precision",precision_score(ytest,pred,average = "weighted"))
print("recall",recall_score(ytest,pred,average = "weighted"))
#print("f1",f1_score(ytest,pred,average = "weighted"))
print("confusion", confusion_matrix(ytest,pred,average = "weighted"))
